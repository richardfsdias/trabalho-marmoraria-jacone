# -*- coding: utf-8 -*-
"""Backend_Marmore.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zr9IPyjARpoj-6-MeU-ORCSweVSomFg3
"""
from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from werkzeug.security import generate_password_hash, check_password_hash
from flask_migrate import Migrate
import os
from dotenv import load_dotenv
from sqlalchemy import Enum

# Inicializa o Flask
app = Flask(__name__)

# Configuração do CORS pra permitir todas as origens
CORS(app, resources={r"/*": {
    "origins": "*",  # Permite qualquer origem
    "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],  # Todos os métodos HTTP necessários
    "allow_headers": ["Content-Type", "Authorization"],  # Permite cabeçalhos usados pelo Axios
}})

# Configuração do MySQL
load_dotenv()
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:JulietaeLana1@@127.0.0.1/loja?charset=utf8mb4'
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

# Inicializa o banco de dados
db = SQLAlchemy(app)
migrate = Migrate(app, db)

# ... resto do código (modelos, rotas, etc.) permanece o mesmo ...

# ... resto do código (modelos, rotas, etc.) permanece o mesmo ...

# ... resto do código (modelos, rotas, etc.) permanece o mesmo ...

# ... resto do código (modelos, rotas, etc.) permanece o mesmo ...

# Criação das classes de acordo com as tabelas no Banco de Dados
class Marmores(db.Model):
  __tablename__ = 'marmores'
  id = db.Column(db.Integer, primary_key=True, autoincrement=True)
  nome = db.Column(db.String(100), nullable=False)
  preco_m2 = db.Column(db.Numeric(10, 2), nullable=False)
  quantidade = db.Column(db.Numeric(10, 2), nullable=False, default=0.0)
  def serialize(self):  # Serialização do Estoque
    return {
        'id': self.id,
        'nome': self.nome,
        'preco_m2': self.preco_m2,
        'quantidade': float(self.quantidade)
    }
# Colocar exatamente os parametros do Banco de Dados

class Funcionario(db.Model):
  __tablename__ = 'funcionarios'
  id = db.Column(db.Integer, primary_key=True, autoincrement=True)
  nome = db.Column(db.String(100), nullable=False)
  cpf = db.Column(db.String(20), unique=True, nullable=False)
  senha = db.Column(db.String(255), nullable=False)
  cargo = db.Column(db.String(50))
  data_contratacao = db.Column(db.Date)
  ativo = db.Column(db.Boolean, default=True)
  email = db.Column(db.String(100), unique=True, nullable=False)


class Clientes(db.Model):
  __tablename__ = 'clientes'
  id = db.Column(db.Integer, primary_key=True, autoincrement=True)
  nome = db.Column(db.String(100), nullable=False)
  telefone = db.Column(db.String(9), nullable=False)
  email = db.Column(db.String(100))
  endereco = db.Column(db.String(200), nullable=False)
  cidade = db.Column(db.String(50), nullable=False)
  estado = db.Column(db.String(2))
  cep = db.Column(db.String(10))
  data_cadastro = db.Column(db.DateTime, server_default=db.text("CURRENT_TIMESTAMP"))
  def serialize(self):
    return {
        'id': self.id,
        'nome': self.nome,
        'telefone': self.telefone,
        'email': self.email,
        'endereco': self.endereco,
        'cidade': self.cidade,
        'estado': self.estado,
        'cep': self.cep,
        'data_cadastro': self.data_cadastro.isoformat() if self.data_cadastro else None
    }

class Pedidos(db.Model):
  __tablename__ = 'pedidos'
  id = db.Column(db.Integer,  primary_key=True, autoincrement=True)
  cliente_id = db.Column(db.Integer, db.ForeignKey('clientes.id', ondelete='CASCADE'), nullable=False)
  descricao = db.Column(db.Text)
  tipo_marmore = db.Column(db.String(100))
  metragem = db.Column(db.Numeric(10,2))
  preco_total = db.Column(db.Numeric(10,2))
  data_pedido = db.Column(db.DateTime, server_default=db.text("CURRENT_TIMESTAMP"))
  status= db.Column(db.Enum('Pendente', 'Pago', 'Parcial'), server_default='Pendente')
  def serialize(self):
    return {
        'id': self.id,
        'cliente_id': self.cliente_id,
        'tipo_marmore': self.tipo_marmore,
        'metragem': float(self.metragem),
        'preco_total': float(self.preco_total),
        'status': self.status
    }


class Pagamentos(db.Model):
  __tablename__ = 'pagamentos'
  id = db.Column(db.Integer, primary_key=True, autoincrement=True)
  pedido_id = db.Column(db.Integer, db.ForeignKey('pedidos.id', ondelete='CASCADE'), nullable=False)
  forma_pagamento = db.Column(db.String(50))
  valor_pago = db.Column(db.Numeric(10,2))
  data_pagamento = db.Column(db.DateTime, server_default=db.text("CURRENT_TIMESTAMP"))
  status_pagamento = db.Column(db.Enum('Pendente', 'Pago', 'Parcial'), server_default='Pendente')


class Entregas(db.Model):
  __tablename__ = 'entregas'
  id = db.Column(db.Integer, primary_key=True, autoincrement=True)
  pedido_id = db.Column(db.Integer, db.ForeignKey('pedidos.id', ondelete='CASCADE'), nullable=False)
  data_prevista = db.Column(db.Date)
  data_entrega = db.Column(db.Date)
  status_entrega = db.Column(db.Enum('Pendente', 'Entregue', 'Atrasado'), server_default='Pendente')
  observacoes = db.Column(db.Text)


class Estoque(db.Model):
  __tablename__ = 'estoque'
  id = db.Column(db.Integer, primary_key=True, autoincrement=True)
  nome_item = db.Column(db.String(100), nullable=False)
  tipo = db.Column(db.String(50))
  quantidade = db.Column(db.Numeric(10,2), nullable=False)
  unidade_media = db.Column(db.String(10))
  preco_unitario = db.Column(db.Numeric(10,2))
  data_atualizacao = db.Column(db.DateTime, server_default=db.text("CURRENT_TIMESTAMP"))


class Movimentacoes_Estoque(db.Model):
  __tablename__ = 'movimentacoes_estoque'
  id = db.Column(db.Integer, primary_key=True, autoincrement=True)
  estoque_id = db.Column(db.Integer, db.ForeignKey('estoque.id', ondelete='CASCADE'), nullable=False)
  tipo_movimentacao = db.Column(db.Enum('Entrada', 'Saída'), nullable=False)
  quantidade = db.Column(db.Numeric(10,2), nullable=False)
  data_movimentacao = db.Column(db.DateTime, server_default=db.text("CURRENT_TIMESTAMP"))
  funcionario_id = db.Column(db.Integer, db.ForeignKey('funcionarios.id'))
  observacao = db.Column(db.Text)
  def serialize(self):
    return {
        'id': self.id,
        'estoque_id': self.estoque_id,
        'tipo_movimentacao': self.tipo_movimentacao,
        'quantidade': float(self.quantidade),
        'data_movimentacao': self.data_movimentacao.isoformat() if self.data_movimentacao else None,
    }


# Configuração do JWT (tokens de autenticação)
app.config['JWT_SECRET_KEY'] = 'super-secret-key' # Trocar em produção!
jwt = JWTManager(app)

# Rota de Login
@app.route('/login', methods=['POST'])
def login():
  dados = request.json # Dados enviados pelo React
  email = request.json.get('email', '').strip()
  senha = dados.get('senha', '')

  if not email or '@' not in email:
    return jsonify({"erro": "Email inválido"}), 400

  # Busca o funcionário no banco de dados
  funcionario = Funcionario.query.filter_by(email=email).first()

  # Verifica se o funcionário existe e a senha está correta
  if not funcionario or not check_password_hash(funcionario.senha, senha):
    return jsonify({"erro": "Credenciais invalidas "}), 401


    # Cria um token de acesso (como um "passaporte" temporário)
  access_token = create_access_token(identity={
      'id': funcionario.id,
      'cargo': funcionario.cargo
      })

  return jsonify(access_token=access_token), 200


# Rota protegida (só funcionários logados)
@app.route('/pedidos', methods=['GET'])
@jwt_required()   # Exige um token válido
def listar_pedidos():
  #Obtém o ID do funcionário do token
  funcionario_atual = get_jwt_identity()

  # Lógica para buscar pedidos no banco (exemplo simplificado)
  return jsonify({"pedidos": []}), 200


@app.route('/marmores', methods=['GET'])
@jwt_required()
def listar_marmores():
  try:
    marmores = Marmores.query.all()
    return jsonify([m.serialize() for m in marmores]), 200
  except Exception as e:
      return jsonify({"erro": str(e)}), 500

@app.route('/marmores', methods=['POST'])
@jwt_required()
def criar_marmore():
  try:
      data = request.get_json()
      if not all(key in data for key in ['nome', 'preco_m2', 'quantidade']):
        return jsonify({"Erro": "Dados incompletos"}), 400
      novo_marmore = Marmores(
          nome=data['nome'],
          preco_m2=data['preco_m2'],
          quantidade=data['quantidade']
      )
      db.session.add(novo_marmore)
      db.session.commit()
      return jsonify(novo_marmore.serialize()), 201
  except Exception as e:
      return jsonify({"erro": str(e)}), 500

@app.route('/marmores/<int:id>', methods=['PUT'])
@jwt_required()
def atualizar_marmore(id):
  try:
      marmore = Marmores.query.get(id)
      if not marmore:
          return jsonify({"erro": "Marmore não encontrado"}), 404
      data = request.get_json()
      marmore.nome = data.get('nome', marmore.nome)
      marmore.preco_m2 = data.get('preco_m2', marmore.preco_m2)
      marmore.quantidade = data.get('quantidade', marmore.quantidade)
      db.session.commit()
      return jsonify(marmore.serialize()), 200
  except Exception as e:
      return jsonify({"erro": str(e)}), 500

@app.route('/marmores/<int:id>', methods=['DELETE'])
@jwt_required()
def deletar_marmore(id):
  try:
      marmore = Marmores.query.get(id)
      if not marmore:
        return jsonify({"erro": "Marmore não encontrado"}), 404
      db.session.delete(marmore)
      db.session.commit()
      return jsonify({"Mensagem": "Marmore excluído com sucesso"}), 200
  except Exception as e:
    return jsonify({"Erro": str(e)}), 500


@app.route('/clientes', methods=['GET'])
@jwt_required()
def listar_clientes():
  clientes = Clientes.query.all()
  return jsonify([c.serialize() for c in clientes]), 200

# Rota para criar e editar clientes
@app.route('/clientes', methods=['POST'])
@jwt_required()
def gerenciar_cliente():
  dados = request.json
  if request.method == 'POST':
    novo_cliente = Clientes(
        nome=dados['nome'],
        telefone=dados['telefone'],
        email=dados.get('email'),
        endereco=dados['endereco'],
        cidade=dados['cidade'],
        estado=dados.get('estado'),
        cep=dados.get('cep')
    )
    db.session.add(novo_cliente)
    db.session.commit()

@app.route('/clientes/<int:id>', methods=['PUT'])
@jwt_required()
def atualizar_cliente(id):
    dados = request.json
    cliente = Clientes.query.get(id)
    if cliente:
        cliente.nome = dados.get('nome', cliente.nome)
        cliente.cpf = dados.get('cpf', cliente.cpf)
        cliente.telefone = dados.get('telefone', cliente.telefone)
        cliente.email = dados.get('email', cliente.email)
        cliente.endereco = dados.get('endereco', cliente.endereco)
        db.session.commit()
        return jsonify(cliente.serialize()), 200
    else:
        return jsonify({'erro': "Cliente não encontrado"}), 404
# Rota para deletar clientes
@app.route('/clientes/<int:id>', methods=['DELETE'])
@jwt_required()
def deletar_clientes(id):
  cliente = Clientes.query.get(id)
  if cliente:
    db.session.delete(cliente)
    db.session.commit()
    return jsonify({"mensagem": "Cliente excluído"}), 200
  return jsonify({'erro': "Cliente não encontrado"}), 404


# Rotas para Movimentações
@app.route('/movimentacoes', methods=['GET', 'POST'])
@jwt_required()
def gerenciar_movimentacoes():
  if request.method == 'GET':
    movimentacoes = Movimentacoes_Estoque.query.all()
    return jsonify([m.serialize() for m in movimentacoes]), 200
  elif request.method == 'POST':
    dados = request.json
    nova_movimentacao = Movimentacoes_Estoque(
        estoque_id=dados['estoque_id'],
        tipo_movimentacao=dados['tipo_movimentacao'],
        quantidade=dados['quantidade'],
        funcionario_id=get_jwt_identity()['id']
    )
    item_estoque = Estoque.query.get(dados['estoque_id'])
    if dados['tipo_movimentacao'] == 'Entrada':
     item_estoque.quantidade += dados['quantidade']
    else:
     item_estoque.quantidade -= dados['quantidade']
    db.session.commit()
    return jsonify({"mensagem": "Movimentação registrada"}), 201


@app.route('/movimentacoes/<int:id>', methods=['DELETE'])
@jwt_required()
def deletar_movimentacao(id):
  movimentacao = Movimentacoes_Estoque.query.get(id)
  if movimentacao:
    db.session.delete(movimentacao)
    db.session.commit()
    return jsonify({"mensagem": "Movimentação excluída"}), 200
  return jsonify({"erro": "Movimentação não encontrada"}), 404

# Orçamentos (Pedido com status)
@app.route('/orcamentos', methods=['GET', 'POST'])
@jwt_required()
def gerenciar_orcamentos():
  if request.method == 'GET':
    orcamentos = Pedidos.query.all() # Filtra por status
    return jsonify([o.serialize() for o in orcamentos]), 200

  elif request.method == 'POST':
    dados = request.json
    marmore = Marmores.query.filter_by(nome=dados['material']).first()
    if not marmore:
        return jsonify({"erro": "Material não encontrado"}), 404
    preco_total = marmore.preco_m2 * dados['quantidade']
    novo_orcamento = Pedidos(
        cliente_id=dados['cliente_id'],
        tipo_marmore=dados['material'],
        metragem=dados['quantidade'],
        preco_total=preco_total,  # Calculado aqui
        status='Pendente'
    )
    db.session.add(novo_orcamento)
    db.session.commit()
    return jsonify(novo_orcamento.serialize()), 201

@app.route('/orcamentos/<int:id>', methods=['PUT'])
@jwt_required()
def atualizar_orcamento(id):
    dados = request.json
    orcamento = Pedidos.query.get(id)
    if orcamento:
        orcamento.status = dados.get('status', orcamento.status)
        # Atualize outros campos se necessário
        db.session.commit()
        return jsonify(orcamento.serialize()), 200
    else:
        return jsonify({'erro': "Orçamento não encontrado"}), 404

@app.route('/orcamentos/<int:id>', methods=['DELETE'])
@jwt_required()
def deletar_orcamento(id):
    try:
        orcamento = Pedidos.query.get(id)
        if not orcamento:
            return jsonify({"erro": "Orçamento não encontrado"}), 404
        db.session.delete(orcamento)
        db.session.commit()
        return jsonify({"message": "Orçamento excluído com sucesso"}), 200
    except Exception as e:
        return jsonify({"erro": str(e)}), 500


# Notas (Pedidos Aprovados)
@app.route('/notas', methods=['GET'])
@jwt_required()
def listar_notas():
  notas = Pedidos.query.filter_by(status='Aprovado').all()   # Filtra por status
  return jsonify([n.serialize() for n in notas]), 200


@app.route('/estoque', methods=['GET'])
@jwt_required()
def listar_estoque():
    estoque = Estoque.query.all()
    return jsonify([{
        'id': item.id,
        'nome_item': item.nome_item,
        'quantidade': float(item.quantidade)
    } for item in estoque]), 200

"""Criação do Host"""

if __name__ == '__main__':
  app.run(host='0.0.0.0', port=5000)